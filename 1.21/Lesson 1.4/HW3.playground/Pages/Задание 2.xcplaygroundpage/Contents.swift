

import Foundation

/*:
 ## Упражнение - опциональные значения
 
 >Во время выполнения упражнений данного плейграунда, вы будете выводить в консоль опциональные значения.  Компилятор Swift выдаст предупреждение: «Expression implicitly coerced from `Int?` to Any».  Для целей выполнения заданий, можете данные предупреждения игнорировать.
 
 Ваше приложение запрашивает пользователя его возраст.  Введённые пользователем данные передаются вам в виде текста, `String`.  Однако, вам нужно сохранить значение в виде целого числа `Int`.  Пользователь может сделать ошибку и ввести неверные данные.
 
 Объявите константу `userInputAge` типа `String` и присвойте ей значение "34e" для моделирования опечатки.  Затем определите константу `userAge` типа `Int` и используйте конструктор `Int` для преобразования `userInputAge`.  Какую ошибку вы получаете?
 */

//let userInputAge = "34е"
//let userAge: Int = Int(userInputAge) ?? 0
// Проблема заключается в не соответсвии типов данных. Нельзя присвоить опциональное значение не опциональному типу.


/*:
 Теперь поменяйте тип `userAge` на `Int?`, и напечатайте значение `userAge`.  Почему значение `userAge` равно `nil`?  Ответьте в комментарии или внутри команды print.
 */
//let userInputAge = "34е"
//let userAge = Int(userInputAge)
//print(userAge)

// Компилятор не смог извлечь из строки целочисленное значение и поэтому вернул nil


/*:
 Теперь исправьте опечатку в значении `userInputAge`.  Что-нибудь в результатах вывода кажется вам неуместным?
 
 Напечатайте `userAge` снова, но теперь разверните `userAge` с помощью оператора «!».
 */

//let userInputAge = "34"
//let userAge = Int(userInputAge)
//print("1", userAge) //вместо чила 34 получаем опциональный Int
//print("2", userAge!)

/*:
 Используйте привязку опционалов для извлечения `userAge`.  Если `userAge` содержит значение, выведите его в консоль.
 */
//let userInputAge = "34"
//let userAge = Int(userInputAge)
//
//if let userAge = userAge {
//    print("3", userAge)
//}

/*:
 Теперь снова эмулируйте опечатку и попробуйте вывести на консоль целочисленное значение переменной `userInputAge`, при помощи оператора "!". Какую ошибку вы получите? Почему?
 */

let userInputAge = "34e"
let userAge = Int(userInputAge)
print(userAge!)
print(Int(userInputAge)!)


// Получаем фатальную ошибку из за того, что вместо ожидаемого значения свойство содержит nil

//: [Ранее: Задание 1](@previous)  |  задание 2 из 4  |  [Далее: Задание 3](@next)
